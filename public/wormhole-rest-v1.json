{
  "openapi": "3.0.0",
  "info": {
    "description": "[Wormhole](http://wormhole.cash/) over HTTP",
    "version": "0.0.1",
    "title": "WormholeREST",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "tags": [
    {
      "name": "configuration",
      "description": "configuration",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://developer.bitcoin.com/wormhole/docs/configuration.html"
      }
    },
    {
      "name": "dataRetrieval",
      "description": "dataRetrieval",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://developer.bitcoin.com/wormhole/docs/dataRetrieval.html"
      }
    },
    {
      "name": "payloadCreation",
      "description": "payloadCreation",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://developer.bitcoin.com/wormhole/docs/payloadCreation.html"
      }
    },
    {
      "name": "rawTransactions",
      "description": "rawTransactions",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://developer.bitcoin.com/wormhole/docs/rawTransactions.html"
      }
    },
    {
      "name": "transaction",
      "description": "transaction",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://developer.bitcoin.com/wormhole/docs/transaction.html"
      }
    }
  ],
  "paths": {
    "/configuration/setAutoCommit/{flag}": {
      "post": {
        "tags": [
          "configuration"
        ],
        "summary": "setAutoCommit",
        "description": "Sets the global flag that determines whether transactions are automatically committed and broadcast.",
        "operationId": "configurationSetAutoCommit",
        "parameters": [
          {
            "name": "flag",
            "in": "path",
            "description": "the flag",
            "required": true,
            "example": "true",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/dataRetrieval/getAllBalancesForAddress/{address}": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "getAllBalancesForAddress",
        "description": "Returns a list of all token balances for a given address.",
        "operationId": "dataRetrievalGetAllBalancesForAddress",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "the address",
            "required": true,
            "example": "bchtest:qq2j9gp97gm9a6lwvhxc4zu28qvqm0x4j5e72v7ejg",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "Invalid address. Note: use cashAddress"
          }
        }
      }
    },
    "/dataRetrieval/getAllBalancesForId/{propertyId}": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "getAllBalancesForId",
        "description": "Returns a list of token balances for a given currency or property identifier.",
        "operationId": "dataRetrievalGetAllBalancesForId",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "The property identifier",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "JSON value is not an integer as expected"
          }
        }
      }
    },
    "/dataRetrieval/getBalance/{address}/{propertyId}": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "getBalance",
        "description": "Returns the token balance for a given address and property.",
        "operationId": "dataRetrievalGetBalance",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "The address",
            "required": true,
            "example": "bchtest:qq2j9gp97gm9a6lwvhxc4zu28qvqm0x4j5e72v7ejg",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyId",
            "in": "path",
            "description": "The property identifier",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "Invalid address. Note: use cashAddress"
          }
        }
      }
    },
    "/dataRetrieval/getBalancesHash/{propertyId}": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "getBalancesHash",
        "description": "Returns a hash of the balances for the property.",
        "operationId": "dataRetrievalGetBalancesHash",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "The property to hash balances for",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "JSON value is not an integer as expected"
          }
        }
      }
    },
    "/dataRetrieval/getCrowdSale/{propertyId}": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "getCrowdSale",
        "description": "Returns information about a crowdsale.",
        "operationId": "dataRetrievalGetCrowdSale",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "The identifier of the crowdsale",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
          },
					{
						"name": "verbose",
						"in": "query",
						"description": "List crowdsale participants (default: false)",
						"required": false,
						"type": "boolean",
						"default": false
					}
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "JSON value is not an integer as expected"
          }
        }
      }
    },
    "/dataRetrieval/getCurrentConsensusHash": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "getCurrentConsensusHash",
        "description": "Returns the consensus hash for all balances for the current block.",
        "operationId": "dataRetrievalGetCurrentConsensusHash",
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/dataRetrieval/getFeeShare": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "getFeeShare",
        "description": "Returns the percentage share of fees distribution applied to the wallet (default) or address (if supplied).",
        "operationId": "dataRetrievalGetFeeShare",
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "description": "Retrieve the fee share for the supplied address",
            "required": false,
            "example": "bchtest:qq2j9gp97gm9a6lwvhxc4zu28qvqm0x4j5e72v7ejg",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "ecosystem",
            "in": "query",
            "description": "The ecosystem to check the fee share (1 for main ecosystem, 2 for test ecosystem)",
            "required": false,
            "example": 0,
            "schema": {
              "type": "number"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "JSON value is not an integer as expected"
          }
        }
      }
    },
    "/dataRetrieval/getGrants/{propertyId}": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "getGrants",
        "description": "Returns information about granted and revoked units of managed tokens.",
        "operationId": "dataRetrievalGetGrants",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "The identifier of the managed tokens to lookup",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "JSON value is not an integer as expected"
          }
        }
      }
    },
    "/dataRetrieval/getInfo": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "getInfo",
        "description": "Returns various state information of the client and protocol.",
        "operationId": "dataRetrievalGetInfo",
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/dataRetrieval/getPayload/{txid}": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "getPayload",
        "description": "Get the payload for an Omni transaction.",
        "operationId": "dataRetrievalGetPayload",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "description": "The hash of the transaction to retrieve payload",
            "required": true,
            "example": "fe28050b93faea61fa88c4c630f0e1f0a1c24d0082dd0e10d369e13212128f33",
            "schema": {
              "type": "string"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "Received an invalid txid as input."
          }
        }
      }
    },
    "/dataRetrieval/getProperty/{propertyId}": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "getProperty",
        "description": "Returns details for about the tokens or smart property to lookup.",
        "operationId": "dataRetrievalGetProperty",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "The identifier of the tokens or property",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "JSON value is not an integer as expected"
          }
        }
      }
    },
    "/dataRetrieval/getSeedBlocks/{startBlock}/{endBlock}": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "getSeedBlocks",
        "description": "Returns a list of blocks containing Omni transactions for use in seed block filtering.",
        "operationId": "dataRetrievalGetSeedBlocks",
        "parameters": [
          {
            "name": "startBlock",
            "in": "path",
            "description": "The first block to look for Omni transactions (inclusive)",
            "required": true,
            "example": 290000,
            "schema": {
              "type": "number"
            }
					},
          {
            "name": "endBlock",
            "in": "path",
            "description": "The last block to look for Omni transactions (inclusive)",
            "required": true,
            "example": 300000,
            "schema": {
              "type": "number"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "JSON value is not an integer as expected"
          }
        }
      }
    },
    "/dataRetrieval/getSTO/{txid}/{recipientFilter}": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "getSTO",
        "description": "Get information and recipients of a send-to-owners transaction.",
        "operationId": "dataRetrievalGetSto",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "description": "The hash of the transaction to lookup",
            "required": true,
            "example": "fe28050b93faea61fa88c4c630f0e1f0a1c24d0082dd0e10d369e13212128f33",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "recipientFilter",
            "in": "query",
            "description": "A filter for recipients (wallet by default, '*' for all)",
            "required": false,
            "example": "*",
            "schema": {
              "type": "string"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "Invalid address. Note: use cashAddress"
          }
        }
      }
    },
    "/dataRetrieval/getTransaction/{txid}": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "getTransaction",
        "description": "Get detailed information about an Omni transaction.",
        "operationId": "dataRetrievalGetTransaction",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "description": "The hash of the transaction to lookup",
            "required": true,
            "example": "fe28050b93faea61fa88c4c630f0e1f0a1c24d0082dd0e10d369e13212128f33",
            "schema": {
              "type": "string"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "No information available about transaction"
          }
        }
      }
    },
    "/dataRetrieval/listBlockTransactions/{index}": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "listBlockTransactions",
        "description": "Lists all Omni transactions in a block.",
        "operationId": "dataRetrievalListBlockTransactions",
        "parameters": [
          {
            "name": "index",
            "in": "path",
            "description": "The block height or block index",
            "required": true,
            "example": 279007,
            "schema": {
              "type": "number"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "JSON value is not an integer as expected"
          }
        }
      }
    },
    "/dataRetrieval/listPendingTransactions/{address}": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "listPendingTransactions",
        "description": "Returns a list of unconfirmed Omni transactions, pending in the memory pool.",
        "operationId": "dataRetrievalListPendingTransactions",
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "description": "Address filter (default: '' for no filter)",
            "required": false,
            "example": "bchtest:qq2j9gp97gm9a6lwvhxc4zu28qvqm0x4j5e72v7ejg",
            "schema": {
              "type": "string"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "Invalid address. Note: use cashAddress"
          }
        }
      }
    },
    "/dataRetrieval/listProperties": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "listProperties",
        "description": "Lists all tokens or smart properties.",
        "operationId": "dataRetrievalListProperties",
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "description": "address filter (default: '*')",
            "required": false,
            "example": "*",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "count",
            "in": "query",
            "description": "show at most n transactions (default: 10)",
            "required": false,
            "example": 10,
            "schema": {
              "type": "number"
            }
					},
          {
            "name": "skip",
            "in": "query",
            "description": "skip the first n transactions (default: 0)",
            "required": false,
            "example": 0,
            "schema": {
              "type": "number"
            }
					},
          {
            "name": "startBlock",
            "in": "query",
            "description": "first block to begin the search (default: 0)",
            "required": false,
            "example": 0,
            "schema": {
              "type": "number"
            }
					},
          {
            "name": "endBlock",
            "in": "query",
            "description": "last block to include in the search (default: 9999999)",
            "required": false,
            "example": 9999999,
            "schema": {
              "type": "number"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/dataRetrieval/listTransactions": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "listTransactions",
        "description": "List wallet transactions, optionally filtered by an address and block boundaries.",
        "operationId": "dataRetrievalListTransactions",
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/payloadCreation/burnBCH": {
      "get": {
        "tags": [
          "payloadCreation"
        ],
        "summary": "burnBCH",
        "description": "Creates the payload to burn bch to get whc.",
        "operationId": "payloadCreationBurnBCH",
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/payloadCreation/changeIssuer/{propertyId}": {
      "post": {
        "tags": [
          "payloadCreation"
        ],
        "summary": "changeIssuer",
        "description": "Creates the payload to change the issuer on record of the given tokens.",
        "operationId": "payloadCreationChangeIssuer",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "The identifier of the tokens",
            "required": true,
            "example": 3,
            "schema": {
              "type": "number"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "500": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Not Found."
                }
              }
            }
          }
        }
      }
    },
    "/payloadCreation/closeCrowdSale/{propertyId}": {
      "post": {
        "tags": [
          "payloadCreation"
        ],
        "summary": "closeCrowdSale",
        "description": "Creates the payload to manually close a crowdsale.",
        "operationId": "payloadCreationCloseCrowdSale",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "The identifier of the crowdsale to close",
            "required": true,
            "example": 70,
            "schema": {
              "type": "number"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "JSON value is not an integer as expected",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "JSON value is not an integer as expected"
                }
              }
            }
          }
        }
      }
    },
    "/payloadCreation/grant/{propertyId}/{amount}": {
      "post": {
        "tags": [
          "payloadCreation"
        ],
        "summary": "grant",
        "description": "Creates the payload to issue or grant new units of managed tokens.",
        "operationId": "payloadCreationGrant",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "The identifier of the tokens to grant",
            "required": true,
            "example": 51,
            "schema": {
              "type": "number"
            }
					},
          {
            "name": "amount",
            "in": "path",
            "description": "The amount of tokens to create",
            "required": true,
            "example": "7000",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "memo",
            "in": "query",
            "description": "A text note attached to this transaction (none by default)",
            "required": false,
            "example": "Hello BITBOX",
            "schema": {
              "type": "string"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Not Found"
                }
              }
            }
          }
        }
      }
    },
    "/payloadCreation/crowdsale/{ecosystem}/{propertyPricision}/{previousId}/{category}/{subcategory}/{name}/{url}/{data}/{propertyIdDesired}/{tokensPerUnit}/{deadline}/{earlyBonus}/{undefine}/{totalNumber}": {
      "post": {
        "tags": [
          "payloadCreation"
        ],
        "summary": "crowdsale",
        "description": "Creates the payload for a new tokens issuance with crowdsale.",
        "operationId": "payloadCreationCrowdsale",
        "parameters": [
          {
            "name": "ecosystem",
            "in": "path",
            "description": "The ecosystem to create the tokens in, must be 1",
            "required": true,
            "example": "1",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "propertyPricision",
            "in": "path",
            "description": "The pricision of the tokens to create:[0, 8]",
            "required": true,
            "example": 1,
            "schema": {
              "type": "number"
            }
					},
          {
            "name": "previousId",
            "in": "path",
            "description": "An identifier of a predecessor token (0 for new crowdsales)",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
					},
          {
            "name": "category",
            "in": "path",
            "description": "A category for the new tokens (can be '')",
            "required": true,
            "example": "Companies",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "subcategory",
            "in": "path",
            "description": "A subcategory for the new tokens (can be '')",
            "required": true,
            "example": "Bitcoin Mining",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "name",
            "in": "path",
            "description": "The name of the new tokens to create",
            "required": true,
            "example": "Quantum Miner",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "url",
            "in": "path",
            "description": "An URL for further information about the new tokens (can be '')",
            "required": true,
            "example": "www.example.com",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "data",
            "in": "path",
            "description": "A description for the new tokens (can be '')",
            "required": true,
            "example": "Quantum Miner Tokens",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "propertyIdDesired",
            "in": "path",
            "description": "The identifier of a token eligible to participate in the crowdsale",
            "required": true,
            "example": 2,
            "schema": {
              "type": "number"
            }
					},
          {
            "name": "tokensPerUnit",
            "in": "path",
            "description": "The amount of tokens granted per unit invested in the crowdsale",
            "required": true,
            "example": "100",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "deadline",
            "in": "path",
            "description": "The deadline of the crowdsale as Unix timestamp",
            "required": true,
            "example": 1483228800,
            "schema": {
              "type": "number"
            }
					},
          {
            "name": "earlyBonus",
            "in": "path",
            "description": "An early bird bonus for participants in percent per week",
            "required": true,
            "example": 30,
            "schema": {
              "type": "number"
            }
					},
          {
            "name": "undefine",
            "in": "path",
            "description": "The value must be 0",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
					},
          {
            "name": "totalNumber",
            "in": "path",
            "description": "The number of tokens to create",
            "required": true,
            "example": "192978657",
            "schema": {
              "type": "string"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/payloadCreation/fixed/{ecosystem}/{propertyPricision}/{previousId}/{category}/{subcategory}/{name}/{url}/{data}/{amount}": {
      "post": {
        "tags": [
          "payloadCreation"
        ],
        "summary": "fixed",
        "description": "Creates the payload for a new tokens issuance with fixed supply.",
        "operationId": "payloadCreationFixed",
        "parameters": [
          {
            "name": "ecosystem",
            "in": "path",
            "description": "The ecosystem to create the tokens in, must be 1",
            "required": true,
            "example": "1",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "propertyPricision",
            "in": "path",
            "description": "The pricision of the tokens to create:[0, 8]",
            "required": true,
            "example": 1,
            "schema": {
              "type": "number"
            }
					},
          {
            "name": "previousId",
            "in": "path",
            "description": "An identifier of a predecessor token (use 0 for new tokens)",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
					},
          {
            "name": "category",
            "in": "path",
            "description": "A category for the new tokens (can be '')",
            "required": true,
            "example": "Companies",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "subcategory",
            "in": "path",
            "description": "A subcategory for the new tokens (can be '')",
            "required": true,
            "example": "Bitcoin Mining",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "name",
            "in": "path",
            "description": "The name of the new tokens to create",
            "required": true,
            "example": "Quantum Miner",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "url",
            "in": "path",
            "description": "An URL for further information about the new tokens (can be '')",
            "required": true,
            "example": "www.example.com",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "data",
            "in": "path",
            "description": "A description for the new tokens (can be '')",
            "required": true,
            "example": "Quantum Miner Tokens",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "amount",
            "in": "path",
            "description": "The number of tokens to create",
            "required": true,
            "example": "1000000",
            "schema": {
              "type": "string"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/payloadCreation/managed/{ecosystem}/{propertyPricision}/{previousId}/{category}/{subcategory}/{name}/{url}/{data}": {
      "post": {
        "tags": [
          "payloadCreation"
        ],
        "summary": "managed",
        "description": "Creates the payload for a new tokens issuance with manageable supply.",
        "operationId": "payloadCreationManaged",
        "parameters": [
          {
            "name": "ecosystem",
            "in": "path",
            "description": "The ecosystem to create the tokens in, must be 1",
            "required": true,
            "example": "1",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "propertyPricision",
            "in": "path",
            "description": "The pricision of the tokens to create:[0, 8]",
            "required": true,
            "example": 1,
            "schema": {
              "type": "number"
            }
					},
          {
            "name": "previousId",
            "in": "path",
            "description": "An identifier of a predecessor token (use 0 for new tokens)",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
					},
          {
            "name": "category",
            "in": "path",
            "description": "A category for the new tokens (can be '')",
            "required": true,
            "example": "Companies",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "subcategory",
            "in": "path",
            "description": "A subcategory for the new tokens (can be '')",
            "required": true,
            "example": "Bitcoin Mining",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "name",
            "in": "path",
            "description": "The name of the new tokens to create",
            "required": true,
            "example": "Quantum Miner",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "url",
            "in": "path",
            "description": "An URL for further information about the new tokens (can be '')",
            "required": true,
            "example": "www.example.com",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "data",
            "in": "path",
            "description": "A description for the new tokens (can be '')",
            "required": true,
            "example": "Quantum Miner Tokens",
            "schema": {
              "type": "string"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input."
          }
        }
      }
    },
    "/payloadCreation/partiCrwoSale/{amount}": {
      "post": {
        "tags": [
          "payloadCreation"
        ],
        "summary": "partiCrwoSale",
        "description": "Create the payload for a participate crowsale transaction",
        "operationId": "payloadCreationPartiCrwoSale",
        "parameters": [
          {
            "name": "amount",
            "in": "path",
            "description": "The amount of WHC to particrowsale",
            "required": true,
            "example": "100.0",
            "schema": {
              "type": "string"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/payloadCreation/revoke/{propertyId}/{amount}": {
      "post": {
        "tags": [
          "payloadCreation"
        ],
        "summary": "revoke",
        "description": "Creates the payload to revoke units of managed tokens.",
        "operationId": "payloadCreationRevoke",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "The identifier of the tokens to revoke",
            "required": true,
            "example": 51,
            "schema": {
              "type": "number"
            }
					},
          {
            "name": "amount",
            "in": "path",
            "description": "The amount of tokens to revoke",
            "required": true,
            "example": "100",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "memo",
            "in": "query",
            "description": "A text note attached to this transaction (none by default)",
            "required": false,
            "example": "Goodbye BITBOX",
            "schema": {
              "type": "string"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/payloadCreation/sendAll/{ecosystem}": {
      "post": {
        "tags": [
          "payloadCreation"
        ],
        "summary": "sendAll",
        "description": "Create the payload for a send all transaction.",
        "operationId": "payloadCreationSendAll",
        "parameters": [
          {
            "name": "ecosystem",
            "in": "path",
            "description": "The ecosystem of the tokens to send (1 for main ecosystem, 2 for test ecosystem)",
            "required": true,
            "example": 2,
            "schema": {
              "type": "number"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/payloadCreation/simpleSend/{propertyId}/{amount}": {
      "post": {
        "tags": [
          "payloadCreation"
        ],
        "summary": "simpleSend",
        "description": "Create the payload for a simple send transaction.",
        "operationId": "payloadCreationSimpleSend",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "The identifier of the tokens to send",
            "required": true,
            "example": 1,
            "schema": {
              "type": "number"
            }
					},
          {
            "name": "amount",
            "in": "path",
            "description": "The amount to send",
            "required": true,
            "example": "100.0",
            "schema": {
              "type": "string"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/payloadCreation/STO/{propertyId}/{amount}": {
      "post": {
        "tags": [
          "payloadCreation"
        ],
        "summary": "STO",
        "description": "Creates the payload for a send-to-owners transaction",
        "operationId": "payloadCreationSTO",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "The identifier of the tokens to distribute",
            "required": true,
            "example": 3,
            "schema": {
              "type": "number"
            }
					},
          {
            "name": "amount",
            "in": "path",
            "description": "The amount to distribute",
            "required": true,
            "example": "5000",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "distributionProperty",
            "in": "query",
            "description": "The identifier of the property holders to distribute to",
            "required": false,
            "example": 0,
            "schema": {
              "type": "number"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/rawTransactions/change/{rawTx}/{prevTxs}/{destination}/{fee}": {
      "post": {
        "tags": [
          "rawTransactions"
        ],
        "summary": "createRawTxChange",
        "description": "Adds a change output to the transaction.",
        "operationId": "rawTransactionsChange",
        "parameters": [
          {
            "name": "rawTx",
            "in": "path",
            "description": "The raw transaction to extend",
            "required": true,
            "example": "0100000001b15ee60431ef57ec682790dec5a3c0d83a0c360633ea8308fbf6d5fc10a779670400000000ffffffff025c0d00000000000047512102f3e471222bb57a7d416c82bf81c627bfcd2bdc47f36e763ae69935bba4601ece21021580b888ff56feb27f17f08802ebed26258c23697d6a462d43fc13b565fda2dd52aeaa0a0000000000001976a914946cb2e08075bcbaf157e47bcb67eb2b2339d24288ac00000000",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prevTxs",
            "in": "path",
            "description": "A JSON array of transaction inputs",
            "required": true,
            "example": "[{\"txid\":\"6779a710fcd5f6fb0883ea3306360c3ad8c0a3c5de902768ec57ef3104e65eb1\",\"vout\":4,\"scriptPubKey\":\"76a9147b25205fd98d462880a3e5b0541235831ae959e588ac\",\"value\":0.00068257}]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "destination",
            "in": "path",
            "description": "The destination for the change",
            "required": true,
            "example": "qpaj2gzlmxx5v2yq50jmq4qjxkp3462eu5e4653006",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fee",
            "in": "path",
            "description": "The desired transaction fees",
            "required": true,
            "example": 0.00003500,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "position",
            "in": "query",
            "description": "The position of the change output (default: first position)",
            "required": false,
            "example": 1,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "Received an invalid block height.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid block height."
                }
              }
            }
          }
        }
      }
    },
    "/rawTransactions/input/{rawTx}/{txid}/{n}": {
      "post": {
        "tags": [
          "rawTransactions"
        ],
        "summary": "createRawTxInput",
        "description": "Adds a transaction input to the transaction.",
        "operationId": "rawTransactionsInput",
        "parameters": [
          {
            "name": "rawTx",
            "in": "path",
            "description": "The raw transaction to extend",
            "required": true,
            "example": "01000000000000000000",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "txid",
            "in": "path",
            "description": "The hash of the input transaction",
            "required": true,
            "example": "b006729017df05eda586df9ad3f8ccfee5be340aadf88155b784d1fc0e8342ee",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "n",
            "in": "path",
            "description": "The index of the transaction output used as input",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/rawTransactions/opReturn/{rawtx}/{txid}": {
      "post": {
        "tags": [
          "rawTransactions"
        ],
        "summary": "createRawTxOpReturn",
        "description": "Adds a payload with class C (op-return) encoding to the transaction.",
        "operationId": "rawTransactionsOpReturn",
        "parameters": [
          {
            "name": "rawTx",
            "in": "path",
            "description": "The raw transaction to extend",
            "required": true,
            "example": "01000000000000000000",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "payload",
            "in": "path",
            "description": "The hex-encoded payload to add",
            "required": true,
            "example": "00000000000000020000000006dac2c0",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/rawTransactions/reference/{rawtx}/{txid}/{n}": {
      "post": {
        "tags": [
          "rawTransactions"
        ],
        "summary": "createRawTxReference",
        "description": "Adds a reference output to the transaction.",
        "operationId": "rawTransactionsReference",
        "parameters": [
          {
            "name": "rawTx",
            "in": "path",
            "description": "The raw transaction to extend",
            "required": true,
            "example": "0100000001a7a9402ecd77f3c9f745793c9ec805bfa2e14b89877581c734c774864247e6f50400000000ffffffff03aa0a0000000000001976a9146d18edfe073d53f84dd491dae1379f8fb0dfe5d488ac5c0d0000000000004751210252ce4bdd3ce38b4ebbc5a6e1343608230da508ff12d23d85b58c964204c4cef3210294cc195fc096f87d0f813a337ae7e5f961b1c8a18f1f8604a909b3a5121f065b52aeaa0a0000000000001976a914946cb2e08075bcbaf157e47bcb67eb2b2339d24288ac00000000",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "destination",
            "in": "path",
            "description": "The reference address or destination",
            "required": true,
            "example": "bchtest:qq2j9gp97gm9a6lwvhxc4zu28qvqm0x4j5e72v7ejg",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "amount",
            "in": "query",
            "description": "The optional reference amount (minimal by default)",
            "required": false,
            "example": 0.005,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/rawTransactions/decodeTransaction/{rawtx}": {
      "get": {
        "tags": [
          "rawTransactions"
        ],
        "summary": "decodeTransaction",
        "description": "Decodes an Omni transaction.",
        "operationId": "rawTransactionsDecodeTransaction",
        "parameters": [
          {
            "name": "rawTx",
            "in": "path",
            "description": "The raw transaction to decode",
            "required": true,
            "example": "010000000163af14ce6d477e1c793507e32a5b7696288fa89705c0d02a3f66beb3c5b8afee0100000000ffffffff02ac020000000000004751210261ea979f6a06f9dafe00fb1263ea0aca959875a7073556a088cdfadcd494b3752102a3fd0a8a067e06941e066f78d930bfc47746f097fcd3f7ab27db8ddf37168b6b52ae22020000000000001976a914946cb2e08075bcbaf157e47bcb67eb2b2339d24288ac00000000",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prevTxs",
            "in": "query",
            "description": "A JSON array of transaction inputs (default: none)",
            "required": false,
            "example": "[{\"txid\":\"6779a710fcd5f6fb0883ea3306360c3ad8c0a3c5de902768ec57ef3104e65eb1\",\"vout\":4,\"scriptPubKey\":\"76a9147b25205fd98d462880a3e5b0541235831ae959e588ac\",\"value\":0.00068257}]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "The parsing block height (default: 0 for chain height)",
            "required": false,
            "example": 0,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/transaction/burnBCHGetWHC/{amount}": {
      "post": {
        "tags": [
          "transaction"
        ],
        "summary": "burnBCHGetWHC",
        "description": "Burn BCH to get WHC",
        "operationId": "transactionBurnBCHGetWHC",
        "parameters": [
          {
            "name": "amount",
            "in": "path",
            "description": "The burn bch amount, required minimum amount is 1BCH",
            "required": true,
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redeemAddress",
            "in": "query",
            "description": "The redeem bitcoin address",
            "required": false,
            "example": "qqzy3s0ueaxkf8hcffhtgkgew8c7f7g85um9a2g74r",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/transaction/partiCrowSale/{fromAddress}/{toAddress}/{amount}": {
      "post": {
        "tags": [
          "transaction"
        ],
        "summary": "partiCrowSale",
        "description": "Create and broadcast a participate crowsale transaction.",
        "operationId": "transactionPartiCrowSale",
        "parameters": [
          {
            "name": "fromAddress",
            "in": "path",
            "description": "The address to send from",
            "required": true,
            "example": "qqxyplcfuxnm9z4usma2wmnu4kw9mexeug580mc3lx",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toAddress",
            "in": "path",
            "description": "The address of the receiver",
            "required": true,
            "example": "qqzy3s0ueaxkf8hcffhtgkgew8c7f7g85um9a2g74r",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "amount",
            "in": "path",
            "description": "The amount of WHC to participate crowsale",
            "required": true,
            "example": "100.0",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redeemAddress",
            "in": "query",
            "description": "An address that can spend the transaction dust (sender by default)",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referenceAmount",
            "in": "query",
            "description": "A bitcoin amount that is sent to the receiver (minimal by default)",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/transaction/send/{fromAddress}/{toAddress}/{propertyId}/{amount}": {
      "post": {
        "tags": [
          "transaction"
        ],
        "summary": "send",
        "description": "Create and broadcast a simple send transaction.",
        "operationId": "transactionSend",
        "parameters": [
          {
            "name": "fromAddress",
            "in": "path",
            "description": "The address to send from",
            "required": true,
            "example": "qqxyplcfuxnm9z4usma2wmnu4kw9mexeug580mc3lx",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toAddress",
            "in": "path",
            "description": "The address of the receiver",
            "required": true,
            "example": "qqzy3s0ueaxkf8hcffhtgkgew8c7f7g85um9a2g74r",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyId",
            "in": "path",
            "description": "The identifier of the tokens to send",
            "required": true,
            "example": 1,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "amount",
            "in": "path",
            "description": "The amount to send",
            "required": true,
            "example": "100.0",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redeemAddress",
            "in": "query",
            "description": "An address that can spend the transaction dust (sender by default)",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referenceAmount",
            "in": "query",
            "description": "A bitcoin amount that is sent to the receiver (minimal by default)",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/transaction/sendAll/{fromAddress}/{toAddress}/{ecosystem}": {
      "post": {
        "tags": [
          "transaction"
        ],
        "summary": "sendAll",
        "description": "Transfers all available tokens in the given ecosystem to the recipient.",
        "operationId": "transactionSendAll",
        "parameters": [
          {
            "name": "fromAddress",
            "in": "path",
            "description": "The address to send from",
            "required": true,
            "example": "qqxyplcfuxnm9z4usma2wmnu4kw9mexeug580mc3lx",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toAddress",
            "in": "path",
            "description": "The address of the receiver",
            "required": true,
            "example": "qqzy3s0ueaxkf8hcffhtgkgew8c7f7g85um9a2g74r",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ecosystem",
            "in": "path",
            "description": "The ecosystem of the tokens to send (1 for main ecosystem, 2 for test ecosystem)",
            "required": true,
            "example": 2,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "redeemAddress",
            "in": "query",
            "description": "An address that can spend the transaction dust (sender by default)",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referenceAmount",
            "in": "query",
            "description": "A bitcoin amount that is sent to the receiver (minimal by default)",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/transaction/sendChangeIssuer/{fromAddress}/{toAddress}/{propertyId}": {
      "post": {
        "tags": [
          "transaction"
        ],
        "summary": "sendChangeIssuer",
        "description": "Change the issuer on record of the given tokens.",
        "operationId": "transactionSendChangeIssuer",
        "parameters": [
          {
            "name": "fromAddress",
            "in": "path",
            "description": "The address associated with the tokens",
            "required": true,
            "example": "qqxyplcfuxnm9z4usma2wmnu4kw9mexeug580mc3lx",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toAddress",
            "in": "path",
            "description": "The address to transfer administrative control to",
            "required": true,
            "example": "qqzy3s0ueaxkf8hcffhtgkgew8c7f7g85um9a2g74r",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyId",
            "in": "path",
            "description": "The identifier of the tokens",
            "required": true,
            "example": 3,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/transaction/sendCloseCrowdSale/{fromAddress}/{propertyId}": {
      "post": {
        "tags": [
          "transaction"
        ],
        "summary": "sendCloseCrowdSale",
        "description": "Manually close a crowdsale.",
        "operationId": "transactionSendCloseCrowdSale",
        "parameters": [
          {
            "name": "fromAddress",
            "in": "path",
            "description": "The address associated with the crowdsale to close",
            "required": true,
            "example": "qrutdtt3mwcutj8dusjkt9y75x0m07mukvs8v8g4tn",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyId",
            "in": "path",
            "description": "The identifier of the crowdsale to close",
            "required": true,
            "example": 70,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/transaction/sendGrant/{fromAddress}/{toAddress}/{propertyId}/{amount}": {
      "post": {
        "tags": [
          "transaction"
        ],
        "summary": "sendGrant",
        "description": "Issue or grant new units of managed tokens.",
        "operationId": "transactionSendGrant",
        "parameters": [
          {
            "name": "fromAddress",
            "in": "path",
            "description": "The address to send from",
            "required": true,
            "example": "qrutdtt3mwcutj8dusjkt9y75x0m07mukvs8v8g4tn",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toAddress",
            "in": "path",
            "description": "The receiver of the tokens (sender by default, can be '')",
            "required": true,
            "example": "qq6tftuhukdagy5tthhnnx7xk9awhyc49us2h08xj4",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyId",
            "in": "path",
            "description": "The identifier of the tokens to grant",
            "required": true,
            "example": 51,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "amount",
            "in": "path",
            "description": "The amount of tokens to create",
            "required": true,
            "example": "7000",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memo",
            "in": "query",
            "description": "A text note attached to this transaction (none by default)",
            "required": false,
            "example": "Hello BITBOX",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/transaction/sendIssuanceCrowdSale/{fromAddress}/{ecosystem}/{propertyPricision}/{previousId}/{category}/{subcategory}/{name}/{url}/{data}/{propertyIdDesired}/{tokensPerUnit}/{deadline}/{earlyBonus}/{undefine}/{totalNumber}": {
      "post": {
        "tags": [
          "transaction"
        ],
        "summary": "sendIssuanceCrowdSale",
        "description": "Create new tokens as crowdsale.",
        "operationId": "transactionSendIssuanceCrowdSale",
        "parameters": [
          {
            "name": "fromAddress",
            "in": "path",
            "description": "The address to send from",
            "required": true,
            "example": "qqxyplcfuxnm9z4usma2wmnu4kw9mexeug580mc3lx",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ecosystem",
            "in": "path",
            "description": "The ecosystem to create the tokens in, must be 1",
            "required": true,
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyPricision",
            "in": "path",
            "description": "The pricision of the tokens to create:[0, 8]",
            "required": true,
            "example": 1,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "previousId",
            "in": "path",
            "description": "An identifier of a predecessor token (0 for new crowdsales)",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "category",
            "in": "path",
            "description": "A category for the new tokens (can be '')",
            "required": true,
            "example": "Companies",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subcategory",
            "in": "path",
            "description": "A subcategory for the new tokens  (can be '')",
            "required": true,
            "example": "Bitcoin Mining",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the new tokens to create",
            "required": true,
            "example": "Quantum Miner",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "path",
            "description": "An URL for further information about the new tokens (can be '')",
            "required": true,
            "example": "www.example.com",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "data",
            "in": "path",
            "description": "A description for the new tokens (can be '')",
            "required": true,
            "example": "Hello BITBOX",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyIdDesired",
            "in": "path",
            "description": "The identifier of a token eligible to participate in the crowdsale",
            "required": true,
            "example": 1,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "tokensPerUnit",
            "in": "path",
            "description": "The amount of tokens granted per unit invested in the crowdsale",
            "required": true,
            "example": "100",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deadline",
            "in": "path",
            "description": "The deadline of the crowdsale as Unix timestamp",
            "required": true,
            "example": 1483228800,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "earlyBonus",
            "in": "path",
            "description": "An early bird bonus for participants in percent per week",
            "required": true,
            "example": 30,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "undefine",
            "in": "path",
            "description": "The value must be 0",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "totalNumber",
            "in": "path",
            "description": "The number of tokens to create",
            "required": true,
            "example": "77868698",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/transaction/sendIssuanceFixed/{fromAddress}/{ecosystem}/{propertyPricision}/{previousId}/{category}/{subcategory}/{name}/{url}/{data}/{totalNumber}": {
      "post": {
        "tags": [
          "transaction"
        ],
        "summary": "sendIssuanceFixed",
        "description": "Create new tokens with fixed supply.",
        "operationId": "transactionSendIssuanceFixed",
        "parameters": [
          {
            "name": "fromAddress",
            "in": "path",
            "description": "The address to send from",
            "required": true,
            "example": "qqxyplcfuxnm9z4usma2wmnu4kw9mexeug580mc3lx",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ecosystem",
            "in": "path",
            "description": "The ecosystem to create the tokens in, must be 1",
            "required": true,
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyPricision",
            "in": "path",
            "description": "The pricision of the tokens to create:[0, 8]",
            "required": true,
            "example": 1,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "previousId",
            "in": "path",
            "description": "An identifier of a predecessor token (use 0 for new tokens)",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "category",
            "in": "path",
            "description": "A category for the new tokens (can be '')",
            "required": true,
            "example": "Companies",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subcategory",
            "in": "path",
            "description": "A subcategory for the new tokens  (can be '')",
            "required": true,
            "example": "Bitcoin Mining",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the new tokens to create",
            "required": true,
            "example": "Quantum Miner",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "path",
            "description": "An URL for further information about the new tokens (can be '')",
            "required": true,
            "example": "www.example.com",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "data",
            "in": "path",
            "description": "A description for the new tokens (can be '')",
            "required": true,
            "example": "Hello BITBOX",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "totalNumber",
            "in": "path",
            "description": "The number of tokens to create",
            "required": true,
            "example": "1000000",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/transaction/sendIssuanceManaged/{fromAddress}/{ecosystem}/{propertyPricision}/{previousId}/{category}/{subcategory}/{name}/{url}/{data}": {
      "post": {
        "tags": [
          "transaction"
        ],
        "summary": "sendIssuanceManaged",
        "description": "Create new tokens with manageable supply.",
        "operationId": "transactionSendIssuanceManaged",
        "parameters": [
          {
            "name": "fromAddress",
            "in": "path",
            "description": "The address to send from",
            "required": true,
            "example": "qqxyplcfuxnm9z4usma2wmnu4kw9mexeug580mc3lx",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ecosystem",
            "in": "path",
            "description": "The ecosystem to create the tokens in, must be 1",
            "required": true,
            "example": "1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyPricision",
            "in": "path",
            "description": "The pricision of the tokens to create:[0, 8]",
            "required": true,
            "example": 1,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "previousId",
            "in": "path",
            "description": "An identifier of a predecessor token (use 0 for new tokens)",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "category",
            "in": "path",
            "description": "A category for the new tokens (can be '')",
            "required": true,
            "example": "Companies",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subcategory",
            "in": "path",
            "description": "A subcategory for the new tokens (can be '')",
            "required": true,
            "example": "Bitcoin Mining",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "The name of the new tokens to create",
            "required": true,
            "example": "Quantum Miner",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "path",
            "description": "An URL for further information about the new tokens (can be '')",
            "required": true,
            "example": "www.example.com",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "data",
            "in": "path",
            "description": "A description for the new tokens (can be '')",
            "required": true,
            "example": "Hello BITBOX",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/transaction/sendRawTx/{fromAddress}/{rawTransaction}": {
      "post": {
        "tags": [
          "transaction"
        ],
        "summary": "sendIssuanceManaged",
        "description": "Broadcasts a raw Omni Layer transaction.",
        "operationId": "transactionSendIssuanceManaged",
        "parameters": [
          {
            "name": "fromAddress",
            "in": "path",
            "description": "The address to send from",
            "required": true,
            "example": "qqzy3s0ueaxkf8hcffhtgkgew8c7f7g85um9a2g74r",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rawTransaction",
            "in": "path",
            "description": "The hex-encoded raw transaction",
            "required": true,
            "example": "000000000000000100000000017d7840",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referenceAddress",
            "in": "query",
            "description": "A reference address (none by default)",
            "required": false,
            "example": "bchtest:qq2j9gp97gm9a6lwvhxc4zu28qvqm0x4j5e72v7ejg",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redeemAddress",
            "in": "query",
            "description": "An address that can spent the transaction dust (sender by default)",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referenceAmount",
            "in": "query",
            "description": "A bitcoin amount that is sent to the receiver (minimal by default)",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/transaction/sendRevoke/{fromAddress}/{propertyId}/{amount}": {
      "post": {
        "tags": [
          "transaction"
        ],
        "summary": "sendRevoke",
        "description": "Revoke units of managed tokens.",
        "operationId": "transactionSendRevoke",
        "parameters": [
          {
            "name": "fromAddress",
            "in": "path",
            "description": "The address to revoke the tokens from",
            "required": true,
            "example": "qq6tftuhukdagy5tthhnnx7xk9awhyc49us2h08xj4",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyId",
            "in": "path",
            "description": "The identifier of the tokens to revoke",
            "required": true,
            "example": 51,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "amount",
            "in": "path",
            "description": "The amount of tokens to revoke",
            "required": true,
            "example": "100",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memo",
            "in": "query",
            "description": "A text note attached to this transaction (none by default)",
            "required": false,
            "example": "Hello BITBOX",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/transaction/sendSTO/{fromAddress}/{propertyId}/{amount}": {
      "post": {
        "tags": [
          "transaction"
        ],
        "summary": "sendSTO",
        "description": "Create and broadcast a send-to-owners transaction.",
        "operationId": "transactionSendSTO",
        "parameters": [
          {
            "name": "fromAddress",
            "in": "path",
            "description": "The address to send from",
            "required": true,
            "example": "qrutdtt3mwcutj8dusjkt9y75x0m07mukvs8v8g4tn",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyId",
            "in": "path",
            "description": "The identifier of the tokens to distribute",
            "required": true,
            "example": 3,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "amount",
            "in": "path",
            "description": "The amount to distribute",
            "required": true,
            "example": "5000",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redeemAddress",
            "in": "query",
            "description": "An address that can spend the transaction dust (sender by default)",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "distributionProperty",
            "in": "query",
            "description": "The identifier of the property holders to distribute to",
            "required": false,
            "example": 0,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "/v1"
    }
  ]
}
