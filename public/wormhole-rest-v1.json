{
  "openapi": "3.0.0",
  "info": {
    "description": "wormholerest.bitcoin.com is [Wormhole](http://wormhole.cash/) over REST/HTTP",
    "version": "0.0.1",
    "title": "WormholeREST",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "tags": [
    {
      "name": "configuration",
      "description": "configuration",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://developer.bitcoin.com/wormhole/docs/configuration.html"
      }
    },
    {
      "name": "dataRetrieval",
      "description": "dataRetrieval",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://developer.bitcoin.com/wormhole/docs/dataRetrieval.html"
      }
    },
    {
      "name": "payloadCreation",
      "description": "payloadCreation",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://developer.bitcoin.com/wormhole/docs/payloadCreation.html"
      }
    },
    {
      "name": "rawTransactions",
      "description": "rawTransactions",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://developer.bitcoin.com/wormhole/docs/rawTransactions.html"
      }
    },
    {
      "name": "transactionCreation",
      "description": "transactionCreation",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://developer.bitcoin.com/wormhole/docs/transactionCreation.html"
      }
    }
  ],
  "paths": {
    "/configuration": {
      "get": {
        "tags": [
          "configuration"
        ],
        "summary": "Configuration health check",
        "description": "Returns 'configuration'",
        "operationId": "configuration",
        "responses": {
          "200": {
            "description": "successful response"
          },
          "400": {
            "description": "Server down."
          }
        }
      }
    },
    "/configuration/whcSetAutocommit/{flag}": {
      "post": {
        "tags": [
          "configuration"
        ],
        "summary": "whcSetAutocommit",
        "description": "Sets the global flag that determines whether transactions are automatically committed and broadcast.",
        "operationId": "configurationWhcSetAutocommit",
        "parameters": [
          {
            "name": "flag",
            "in": "path",
            "description": "(boolean, required) the flag",
            "required": true,
            "example": "true",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressDetails"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/dataRetrieval/whcGetAllBalancesForAddress/{address}": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "whcGetAllBalancesForAddress",
        "description": "Returns a list of all token balances for a given address.",
        "operationId": "dataRetrievalWhcGetAllBalancesForAddress",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "(string, required) the address",
            "required": true,
            "example": "bitcoincash:qzs02v05l7qs5s24srqju498qu55dwuj0cx5ehjm2c",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUtxo"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/dataRetrieval/whcGetAllBalancesForId/{propertyId}": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "whcGetAllBalancesForId",
        "description": "Returns a list of token balances for a given currency or property identifier.",
        "operationId": "dataRetrievalWhcGetAllBalancesForId",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "(number, required) the property identifier",
            "required": true,
            "example": "BITBOXCoin",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUtxo"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/dataRetrieval/whcGetBalance/{address}/{propertyId}": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "whcGetBalance",
        "description": "Returns the token balance for a given address and property.",
        "operationId": "dataRetrievalWhcGetBalance",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "(string, required) the address",
            "required": true,
            "example": "bitcoincash:qzs02v05l7qs5s24srqju498qu55dwuj0cx5ehjm2c",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyId",
            "in": "path",
            "description": "(number, required) the property identifier",
            "required": true,
            "example": "BITBOXCoin",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUtxo"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/dataRetrieval/whcGetBalancesHash/{propertyId}": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "whcGetBalancesHash",
        "description": "Returns a hash of the balances for the property.",
        "operationId": "dataRetrievalWhcGetBalancesHash",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "(number, required) the property to hash balances for",
            "required": true,
            "example": "BITBOXCoin",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUtxo"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/dataRetrieval/whcGetCrowdSale/{propertyId}": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "whcGetCrowdSale",
        "description": "Returns information about a crowdsale.",
        "operationId": "dataRetrievalWhcGetCrowdSale",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "(number, required) the identifier of the crowdsale",
            "required": true,
            "example": "BITBOXCoin",
            "schema": {
              "type": "string"
            }
          },
					{
						"name": "verbose",
						"in": "query",
						"description": "(boolean, optional) list crowdsale participants (default: false)",
						"required": false,
						"type": "boolean",
						"default": true
					}
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUtxo"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/dataRetrieval/whcGetCurrentConsensusHash": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "whcGetCurrentConsensusHash",
        "description": "Returns the consensus hash for all balances for the current block.",
        "operationId": "dataRetrievalWhcGetCurrentConsensusHash",
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUtxo"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/dataRetrieval/whcGetFeeShare": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "whcGetFeeShare",
        "description": "Returns the percentage share of fees distribution applied to the wallet (default) or address (if supplied).",
        "operationId": "dataRetrievalWhcGetFeeShare",
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUtxo"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/dataRetrieval/whcGetGrants/{propertyId}": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "whcGetGrants",
        "description": "Returns information about granted and revoked units of managed tokens.",
        "operationId": "dataRetrievalWhcGetGrants",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "(number, required) the identifier of the managed tokens to lookup",
            "required": true,
            "example": "BITBOXCoin",
            "schema": {
              "type": "string"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUtxo"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/dataRetrieval/whcGetInfo": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "whcGetInfo",
        "description": "Returns various state information of the client and protocol.",
        "operationId": "dataRetrievalWhcGetInfo",
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUtxo"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/dataRetrieval/whcGetPayload/{txid}": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "whcGetPayload",
        "description": "Get the payload for an Omni transaction.",
        "operationId": "dataRetrievalWhcGetPayload",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "description": "(string, required) the hash of the transaction to retrieve payload",
            "required": true,
            "example": "fe28050b93faea61fa88c4c630f0e1f0a1c24d0082dd0e10d369e13212128f33",
            "schema": {
              "type": "string"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUtxo"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/dataRetrieval/whcGetProperty/{propertyId}": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "whcGetProperty",
        "description": "Returns details for about the tokens or smart property to lookup.",
        "operationId": "dataRetrievalWhcGetProperty",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "(number, required) the identifier of the tokens or property",
            "required": true,
            "example": "BITBOXCoin",
            "schema": {
              "type": "string"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUtxo"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/dataRetrieval/whcGetSeedBlocks/{startBlock}/{endBlock}": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "whcGetSeedBlocks",
        "description": "Returns a list of blocks containing Omni transactions for use in seed block filtering.",
        "operationId": "dataRetrievalWhcGetSeedBlocks",
        "parameters": [
          {
            "name": "startBlock",
            "in": "path",
            "description": "(number, required) the first block to look for Omni transactions (inclusive)",
            "required": true,
            "example": "0",
            "schema": {
              "type": "number"
            }
					},
          {
            "name": "endBlock",
            "in": "path",
            "description": "(number, required) the last block to look for Omni transactions (inclusive)",
            "required": true,
            "example": "500000",
            "schema": {
              "type": "number"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUtxo"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/dataRetrieval/whcGetSto/{txid}/{recipientFilter}": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "whcGetSto",
        "description": "Get information and recipients of a send-to-owners transaction.",
        "operationId": "dataRetrievalWhcGetSto",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "description": "(string, required) the hash of the transaction to lookup",
            "required": true,
            "example": "fe28050b93faea61fa88c4c630f0e1f0a1c24d0082dd0e10d369e13212128f33",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "recipientFilter",
            "in": "query",
            "description": "(string, optional) a filter for recipients (wallet by default, '*' for all)",
            "required": true,
            "example": "*",
            "schema": {
              "type": "number"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUtxo"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/dataRetrieval/whcGetTransaction/{txid}": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "whcGetTransaction",
        "description": "Get detailed information about an Omni transaction.",
        "operationId": "dataRetrievalWhcGetTransaction",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "description": "(string, required) the hash of the transaction to lookup",
            "required": true,
            "example": "fe28050b93faea61fa88c4c630f0e1f0a1c24d0082dd0e10d369e13212128f33",
            "schema": {
              "type": "string"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUtxo"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/dataRetrieval/whcListBlockTransactions/{index}": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "whcListBlockTransactions",
        "description": "Lists all Omni transactions in a block.",
        "operationId": "dataRetrievalWhcListBlockTransactions",
        "parameters": [
          {
            "name": "index",
            "in": "path",
            "description": "(number, required) the block height or block index",
            "required": true,
            "example": "345345",
            "schema": {
              "type": "string"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUtxo"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/dataRetrieval/whcListPendingTransactions/{address}": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "whcListPendingTransactions",
        "description": "Returns a list of unconfirmed Omni transactions, pending in the memory pool.",
        "operationId": "dataRetrievalWhcListPendingTransactions",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "(string, optional) address filter (default: '' for no filter)",
            "required": true,
            "example": "bitcoincash:qzs02v05l7qs5s24srqju498qu55dwuj0cx5ehjm2c",
            "schema": {
              "type": "string"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUtxo"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/dataRetrieval/whcListProperties": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "whcListProperties",
        "description": "Lists all tokens or smart properties.",
        "operationId": "dataRetrievalWhcListProperties",
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUtxo"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/dataRetrieval/whcListTransactions": {
      "get": {
        "tags": [
          "dataRetrieval"
        ],
        "summary": "whcListTransactions",
        "description": "List wallet transactions, optionally filtered by an address and block boundaries.",
        "operationId": "dataRetrievalWhcListTransactions",
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUtxo"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/payloadCreation/whcCreatePayloadBurnBCH": {
      "get": {
        "tags": [
          "payloadCreation"
        ],
        "summary": "whcCreatePayloadBurnBCH",
        "description": "Creates the payload to burn bch to get whc.",
        "operationId": "payloadCreationWhcCreatePayloadBurnBCH",
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUnconfirmed"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/payloadCreation/whcCreatePayloadChangeIssuer/{propertyId}": {
      "get": {
        "tags": [
          "payloadCreation"
        ],
        "summary": "whcCreateWhcCreatePayloadChangeIssuer",
        "description": "Creates the payload to change the issuer on record of the given tokens.",
        "operationId": "payloadCreationWhcCreatePayloadBurnBCH",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "(number, required) the identifier of the tokens",
            "required": true,
            "example": 100,
            "schema": {
              "type": "number"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUnconfirmed"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/payloadCreation/whcCreatePayloadCloseCrowdSale/{propertyId}": {
      "get": {
        "tags": [
          "payloadCreation"
        ],
        "summary": "whcCreatePayloadCloseCrowdSale",
        "description": "Creates the payload to manually close a crowdsale.",
        "operationId": "payloadCreationWhcCreatePayloadCloseCrowdSale",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "(number, required) the identifier of the crowdsale to close",
            "required": true,
            "example": "BITBOXCoin",
            "schema": {
              "type": "string"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUnconfirmed"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/payloadCreation/whcCreatePayloadGrant/{propertyId}/{amount}": {
      "get": {
        "tags": [
          "payloadCreation"
        ],
        "summary": "whcCreatePayloadGrant",
        "description": "Creates the payload to issue or grant new units of managed tokens.",
        "operationId": "payloadCreationWhcCreatePayloadGrant",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "(number, required) the identifier of the tokens to grant",
            "required": true,
            "example": 51,
            "schema": {
              "type": "number"
            }
					},
          {
            "name": "amount",
            "in": "path",
            "description": "(string, required) the amount of tokens to create",
            "required": true,
            "example": "7000",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "memo",
            "in": "query",
            "description": "(string, optional) a text note attached to this transaction (none by default)",
            "required": false,
            "example": "Hello BITBOX",
            "schema": {
              "type": "string"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUnconfirmed"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/payloadCreation/whcCreatePayloadIssuanceCrowdsale/{ecosystem}/{propertyPricision}/{previousId}/{category}/{subcategory}/{name}/{url}/{data}/{propertyIdDesired}/{tokensPerUnit}/{deadline}/{earlyBonus}/{undefine}/{totalNumber}": {
      "get": {
        "tags": [
          "payloadCreation"
        ],
        "summary": "whcCreatePayloadIssuanceCrowdsale",
        "description": "Creates the payload for a new tokens issuance with crowdsale.",
        "operationId": "payloadCreationWhcCreatePayloadIssuanceCrowdsale",
        "parameters": [
          {
            "name": "ecosystem",
            "in": "path",
            "description": "(string, required) the ecosystem to create the tokens in, must be 1",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "propertyPricision",
            "in": "path",
            "description": "(number, required) the pricision of the tokens to create:[0, 8]",
            "required": true,
            "example": 7000,
            "schema": {
              "type": "number"
            }
					},
          {
            "name": "previousId",
            "in": "path",
            "description": "(number, required) an identifier of a predecessor token (0 for new crowdsales)",
            "required": false,
            "example": "Hello BITBOX",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "category",
            "in": "path",
            "description": "(string, required) a category for the new tokens (can be '')",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "subcategory",
            "in": "path",
            "description": "(string, required) a subcategory for the new tokens  (can be '')",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "name",
            "in": "path",
            "description": "(string, required) the name of the new tokens to create",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "url",
            "in": "path",
            "description": "(string, required) an URL for further information about the new tokens (can be '')",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "data",
            "in": "path",
            "description": "(string, required) a description for the new tokens (can be '')",
            "required": false,
            "example": "(number, required) the identifier of a token eligible to participate in the crowdsale",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "propertyIdDesired",
            "in": "path",
            "description": "tokensPerUnit",
            "required": false,
            "example": "(string, required) the amount of tokens granted per unit invested in the crowdsale",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "deadline",
            "in": "path",
            "description": "(number, required) the deadline of the crowdsale as Unix timestamp",
            "required": false,
            "example": 0,
            "schema": {
              "type": "number"
            }
					},
          {
            "name": "deadline",
            "in": "path",
            "description": "(number, required) the deadline of the crowdsale as Unix timestamp",
            "required": false,
            "example": 0,
            "schema": {
              "type": "number"
            }
					},
          {
            "name": "earlyBonus",
            "in": "path",
            "description": "(number, required) an early bird bonus for participants in percent per week",
            "required": false,
            "example": 0,
            "schema": {
              "type": "number"
            }
					},
          {
            "name": "undefine",
            "in": "path",
            "description": "(number, required) the value must be 0",
            "required": false,
            "example": 0,
            "schema": {
              "type": "number"
            }
					},
          {
            "name": "totalNumber",
            "in": "path",
            "description": "(string, required) the number of tokens to create",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUnconfirmed"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/payloadCreation/whcCreatePayloadIssuanceFixed/{ecosystem}/{propertyPricision}/{previousId}/{category}/{subcategory}/{name}/{url}/{data}/{amount}": {
      "get": {
        "tags": [
          "payloadCreation"
        ],
        "summary": "whcCreatePayloadIssuanceFixed",
        "description": "Creates the payload for a new tokens issuance with fixed supply.",
        "operationId": "payloadCreationWhcCreatePayloadIssuanceFixed",
        "parameters": [
          {
            "name": "ecosystem",
            "in": "path",
            "description": "(string, required) the ecosystem to create the tokens in, must be 1",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "propertyPricision",
            "in": "path",
            "description": "(number, required) the pricision of the tokens to create:[0, 8]",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
					},
          {
            "name": "previousId",
            "in": "path",
            "description": "(number, required) an identifier of a predecessor token (use 0 for new tokens)",
            "required": false,
            "example": 0,
            "schema": {
              "type": "number"
            }
					},
          {
            "name": "category",
            "in": "path",
            "description": "(string, required) a category for the new tokens (can be '')",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "subcategory",
            "in": "path",
            "description": "(string, required) a subcategory for the new tokens  (can be '')",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "name",
            "in": "path",
            "description": "(string, required) the name of the new tokens to create",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "url",
            "in": "path",
            "description": "(string, required) an URL for further information about the new tokens (can be '')",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "data",
            "in": "path",
            "description": "",
            "required": false,
            "example": "(string, required) a description for the new tokens (can be '')",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "amount",
            "in": "path",
            "description": "(string, required) the number of tokens to create",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUnconfirmed"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/payloadCreation/whcCreatePayloadIssuanceManaged/{propertyId}/{amount}": {
      "get": {
        "tags": [
          "payloadCreation"
        ],
        "summary": "whcCreatePayloadIssuanceManaged",
        "description": "Creates the payload for a new tokens issuance with manageable supply.",
        "operationId": "payloadCreationWhcCreatePayloadIssuanceManaged",
        "parameters": [
          {
            "name": "ecosystem",
            "in": "path",
            "description": "(string, required) the ecosystem to create the tokens in, must be 1",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "propertyPricision",
            "in": "path",
            "description": "(number, required) the pricision of the tokens to create:[0, 8]",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
					},
          {
            "name": "previousId",
            "in": "path",
            "description": "(number, required) an identifier of a predecessor token (use 0 for new tokens)",
            "required": false,
            "example": 0,
            "schema": {
              "type": "number"
            }
					},
          {
            "name": "category",
            "in": "path",
            "description": "(string, required) a category for the new tokens (can be '')",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "subcategory",
            "in": "path",
            "description": "(string, required) a subcategory for the new tokens  (can be '')",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "name",
            "in": "path",
            "description": "(string, required) the name of the new tokens to create",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "url",
            "in": "path",
            "description": "(string, required) an URL for further information about the new tokens (can be '')",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "data",
            "in": "path",
            "description": "",
            "required": false,
            "example": "(string, required) a description for the new tokens (can be '')",
            "schema": {
              "type": "string"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUnconfirmed"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/payloadCreation/whcCreatePayloadParticrwoSale/{amount}": {
      "get": {
        "tags": [
          "payloadCreation"
        ],
        "summary": "whcCreatePayloadParticrwoSale",
        "description": "Create the payload for a participate crowsale transaction",
        "operationId": "payloadCreationWhcCreatePayloadParticrwoSale",
        "parameters": [
          {
            "name": "amount",
            "in": "path",
            "description": "(string, required) the amount of WHC to particrowsale",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUnconfirmed"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/payloadCreation/whcCreatePayloadRevoke/{propertyId}/{amount}": {
      "get": {
        "tags": [
          "payloadCreation"
        ],
        "summary": "whcCreatePayloadRevoke",
        "description": "Create the payload for a participate crowsale transaction",
        "operationId": "payloadCreationWhcCreatePayloadRevoke",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "(number, required) the identifier of the tokens to revoke",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
					},
          {
            "name": "amount",
            "in": "path",
            "description": "(string, required) the amount of tokens to revoke",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "memo",
            "in": "path",
            "description": "(string, optional) a text note attached to this transaction (none by default)",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUnconfirmed"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/payloadCreation/whcCreatePayloadSendAll/{ecosystem}": {
      "get": {
        "tags": [
          "payloadCreation"
        ],
        "summary": "whcCreatePayloadSendAll",
        "description": "Create the payload for a send all transaction.",
        "operationId": "payloadCreationWhcCreatePayloadSendAll",
        "parameters": [
          {
            "name": "ecosystem",
            "in": "path",
            "description": "(number, required) the ecosystem of the tokens to send (1 for main ecosystem, 2 for test ecosystem)",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUnconfirmed"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/payloadCreation/whcCreatePayloadSimpleSend/{propertyId}/{amount}": {
      "get": {
        "tags": [
          "payloadCreation"
        ],
        "summary": "whcCreatePayloadSimpleSend",
        "description": "Create the payload for a simple send transaction.",
        "operationId": "payloadCreationWhcCreatePayloadSimpleSend",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "(number, required) the identifier of the tokens to send",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
					},
          {
            "name": "amount",
            "in": "path",
            "description": "(string, required) the amount to send",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUnconfirmed"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/payloadCreation/whcCreatePayloadSTO/{propertyId}/{amount}": {
      "get": {
        "tags": [
          "payloadCreation"
        ],
        "summary": "whcCreatePayloadSTO",
        "description": "Creates the payload for a send-to-owners transaction",
        "operationId": "payloadCreationWhcCreatePayloadSTO",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "(number, required) the identifier of the tokens to distribute",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
					},
          {
            "name": "amount",
            "in": "path",
            "description": "(string, required) the amount to distribute",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
					},
          {
            "name": "distributionproperty",
            "in": "path",
            "description": "(number, optional) the identifier of the property holders to distribute to",
            "required": false,
            "example": "",
            "schema": {
              "type": "number"
            }
					}
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUnconfirmed"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/rawTransactions/whcCreateRawTxChange/{rawtx}/{prevTxs}/{destination}/{fee}/{position}": {
      "get": {
        "tags": [
          "rawTransactions"
        ],
        "summary": "whcCreateRawTxChange",
        "description": "Adds a change output to the transaction.",
        "operationId": "rawTransactionsWhcCreateRawTxChange",
        "parameters": [
          {
            "name": "rawTx",
            "in": "path",
            "description": "(string, required) the raw transaction to extend",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prevTxs",
            "in": "path",
            "description": "(string, required) a JSON array of transaction inputs",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "destination",
            "in": "path",
            "description": "(string, required) the destination for the change",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fee",
            "in": "path",
            "description": "(number, required) the desired transaction fees",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "position",
            "in": "query",
            "description": "(number, optional) the position of the change output (default: first position)",
            "required": false,
            "example": 0,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockDetails"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid block height.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid block height."
                }
              }
            }
          }
        }
      }
    },
    "/rawTransactions/whcCreateRawTxInput/{rawtx}/{txid}/{n}": {
      "get": {
        "tags": [
          "rawTransactions"
        ],
        "summary": "whcCreateRawTxInput",
        "description": "Adds a transaction input to the transaction.",
        "operationId": "rawTransactionsWhcCreateRawTxInput",
        "parameters": [
          {
            "name": "rawTx",
            "in": "path",
            "description": "(string, required) the raw transaction to extend",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "txid",
            "in": "path",
            "description": "(string, required) the hash of the input transaction",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "n",
            "in": "path",
            "description": "(number, required) the index of the transaction output used as input",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockDetails"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid block height.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid block height."
                }
              }
            }
          }
        }
      }
    },
    "/rawTransactions/whcCreateRawTxOpReturn/{rawtx}/{txid}/{n}": {
      "get": {
        "tags": [
          "rawTransactions"
        ],
        "summary": "whcCreateRawTxOpReturn",
        "description": "Adds a payload with class C (op-return) encoding to the transaction.",
        "operationId": "rawTransactionsWhcCreateRawTxOpReturn",
        "parameters": [
          {
            "name": "rawTx",
            "in": "path",
            "description": "(string, required) the raw transaction to extend",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "payload",
            "in": "path",
            "description": "(string, required) the hex-encoded payload to add",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockDetails"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid block height.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid block height."
                }
              }
            }
          }
        }
      }
    },
    "/rawTransactions/whcCreateRawTxReference/{rawtx}/{txid}/{n}": {
      "get": {
        "tags": [
          "rawTransactions"
        ],
        "summary": "whcCreateRawTxReference",
        "description": "Adds a reference output to the transaction.",
        "operationId": "rawTransactionsWhcCreateRawTxReference",
        "parameters": [
          {
            "name": "rawTx",
            "in": "path",
            "description": "(string, required) the raw transaction to extend",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "destination",
            "in": "path",
            "description": "(string, required) the reference address or destination",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "amount",
            "in": "path",
            "description": "(number, optional) the optional reference amount (minimal by default)",
            "required": false,
            "example": 0,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockDetails"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid block height.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid block height."
                }
              }
            }
          }
        }
      }
    },
    "/rawTransactions/whcDecodeTransaction/{rawtx}": {
      "get": {
        "tags": [
          "rawTransactions"
        ],
        "summary": "whcDecodeTransaction",
        "description": "Decodes an Omni transaction.",
        "operationId": "rawTransactionsWhcDecodeTransaction",
        "parameters": [
          {
            "name": "rawTx",
            "in": "path",
            "description": "(string, required) the raw transaction to decode",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prevTxs",
            "in": "path",
            "description": "(string, optional) a JSON array of transaction inputs (default: none)",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "height",
            "in": "path",
            "description": "(number, optional) the parsing block height (default: 0 for chain height)",
            "required": false,
            "example": 0,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockDetails"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid block height.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid block height."
                }
              }
            }
          }
        }
      }
    },
    "/transaction/whcBurnBCHGetWHC/{amount}": {
      "get": {
        "tags": [
          "transaction"
        ],
        "summary": "whcBurnBCHGetWHC",
        "description": "burn BCH to get WHC",
        "operationId": "transactionWhcBurnBCHGetWHC",
        "parameters": [
          {
            "name": "amount",
            "in": "path",
            "description": "(numeric or string, required) The burn bch amount, required minimum amount is 1BCH",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redeemaddress",
            "in": "path",
            "description": "(string, optional) the redeem bitcoin address",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BestBlockHash"
                }
              }
            }
          }
        }
      }
    },
    "/transaction/whcPartiCrowSale/{fromAddress}/{toAddress}/{amount}": {
      "get": {
        "tags": [
          "transaction"
        ],
        "summary": "whcPartiCrowSale",
        "description": "Create and broadcast a participate crowsale transaction.",
        "operationId": "transactionWhcPartiCrowSale",
        "parameters": [
          {
            "name": "fromAddress",
            "in": "path",
            "description": "(string, required) the address to send from",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toAddress",
            "in": "path",
            "description": "(string, required) the address of the receiver",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "amount",
            "in": "path",
            "description": "(string, required) the amount of WHC to participate crowsale",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redeemAddress",
            "in": "path",
            "description": "(string, optional) an address that can spend the transaction dust (sender by default)",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referenceAmount",
            "in": "path",
            "description": "(string, optional) a bitcoin amount that is sent to the receiver (minimal by default)",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BestBlockHash"
                }
              }
            }
          }
        }
      }
    },
    "/transaction/whcSend/{fromAddress}/{toAddress}/{propertyId}/{amount}": {
      "get": {
        "tags": [
          "transaction"
        ],
        "summary": "whcSend",
        "description": "Create and broadcast a simple send transaction.",
        "operationId": "transactionWhcSend",
        "parameters": [
          {
            "name": "fromAddress",
            "in": "path",
            "description": "(string, required) the address to send from",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toAddress",
            "in": "path",
            "description": "(string, required) the address of the receiver",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyId",
            "in": "path",
            "description": "(number, required) the identifier of the tokens to send",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "amount",
            "in": "path",
            "description": "(string, required) the amount to send",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redeemAddress",
            "in": "path",
            "description": "(string, optional) an address that can spend the transaction dust (sender by default)",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referenceAmount",
            "in": "path",
            "description": "(string, optional) a bitcoin amount that is sent to the receiver (minimal by default)",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BestBlockHash"
                }
              }
            }
          }
        }
      }
    },
    "/transaction/whcSendAll/{fromAddress}/{toAddress}/{ecosystem}": {
      "get": {
        "tags": [
          "transaction"
        ],
        "summary": "whcSendAll",
        "description": "Transfers all available tokens in the given ecosystem to the recipient.",
        "operationId": "transactionWhcSendAll",
        "parameters": [
          {
            "name": "fromAddress",
            "in": "path",
            "description": "(string, required) the address to send from",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toAddress",
            "in": "path",
            "description": "(string, required) the address of the receiver",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ecosystem",
            "in": "path",
            "description": "(number, required) the ecosystem of the tokens to send (1 for main ecosystem, 2 for test ecosystem)",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "redeemAddress",
            "in": "path",
            "description": "(string, optional) an address that can spend the transaction dust (sender by default)",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referenceAmount",
            "in": "path",
            "description": "(string, optional) a bitcoin amount that is sent to the receiver (minimal by default)",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BestBlockHash"
                }
              }
            }
          }
        }
      }
    },
    "/transaction/whcSendChangeIssuer/{fromAddress}/{toAddress}/{propertyId}": {
      "get": {
        "tags": [
          "transaction"
        ],
        "summary": "whcSendChangeIssuer",
        "description": "Change the issuer on record of the given tokens.",
        "operationId": "transactionWhcSendChangeIssuer",
        "parameters": [
          {
            "name": "fromAddress",
            "in": "path",
            "description": "(string, required) the address associated with the tokens",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toAddress",
            "in": "path",
            "description": "(string, required) the address to transfer administrative control to",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyId",
            "in": "path",
            "description": "(number, required) the identifier of the tokens",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BestBlockHash"
                }
              }
            }
          }
        }
      }
    },
    "/transaction/whcSendCloseCrowdSale/{fromAddress}/{propertyId}": {
      "get": {
        "tags": [
          "transaction"
        ],
        "summary": "whcSendCloseCrowdSale",
        "description": "Manually close a crowdsale.",
        "operationId": "transactionWhcSendCloseCrowdSale",
        "parameters": [
          {
            "name": "fromAddress",
            "in": "path",
            "description": "(string, required) the address associated with the crowdsale to close",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyId",
            "in": "path",
            "description": "(number, required) the identifier of the crowdsale to close",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BestBlockHash"
                }
              }
            }
          }
        }
      }
    },
    "/transaction/whcSendGrant/{fromAddress}/{toAddress}/{propertyId}/{amount}": {
      "get": {
        "tags": [
          "transaction"
        ],
        "summary": "whcSendGrant",
        "description": "Issue or grant new units of managed tokens.",
        "operationId": "transactionWhcSendGrant",
        "parameters": [
          {
            "name": "fromAddress",
            "in": "path",
            "description": "(string, required) the address to send from",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromAddress",
            "in": "path",
            "description": "(string, required) the receiver of the tokens (sender by default, can be '')",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyId",
            "in": "path",
            "description": "(number, required) the identifier of the tokens to grant",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "amount",
            "in": "path",
            "description": "(string, required) the amount of tokens to create",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memo",
            "in": "path",
            "description": "(string, optional) a text note attached to this transaction (none by default)",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BestBlockHash"
                }
              }
            }
          }
        }
      }
    },
    "/transaction/whcSendIssuanceCrowdSale/{fromAddress}/{ecosystem}/{propertyPricision}/{previousId}/{category}/{subcategory}/{name}/{url}/{data}/{propertyIdDesired}/{tokensPerUnit}/{deadline}/{earlyBonus}/{undefine}/{totalNumber}": {
      "get": {
        "tags": [
          "transaction"
        ],
        "summary": "whcSendIssuanceCrowdSale",
        "description": "Create new tokens as crowdsale.",
        "operationId": "transactionWhcSendIssuanceCrowdSale",
        "parameters": [
          {
            "name": "fromAddress",
            "in": "path",
            "description": "(string, required) the address to send from",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ecosystem",
            "in": "path",
            "description": "(string, required) the ecosystem to create the tokens in, must be 1",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyPricision",
            "in": "path",
            "description": "(number, required) the pricision of the tokens to create:[0, 8]",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "previousId",
            "in": "path",
            "description": "(number, required) an identifier of a predecessor token (0 for new crowdsales)",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "category",
            "in": "path",
            "description": "(string, required) a category for the new tokens (can be '')",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subcategory",
            "in": "path",
            "description": "(string, required) a subcategory for the new tokens  (can be '')",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "(string, required) the name of the new tokens to create",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "path",
            "description": "(string, required) an URL for further information about the new tokens (can be '')",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "data",
            "in": "path",
            "description": "(string, required) a description for the new tokens (can be '')",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyIdDesired",
            "in": "path",
            "description": "(number, required) the identifier of a token eligible to participate in the crowdsale",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "tokensPerUnit",
            "in": "path",
            "description": "(string, required) the amount of tokens granted per unit invested in the crowdsale",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deadline",
            "in": "path",
            "description": "(number, required) the deadline of the crowdsale as Unix timestamp",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "earlyBonus",
            "in": "path",
            "description": "(number, required) an early bird bonus for participants in percent per week",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "undefine",
            "in": "path",
            "description": "(number, required) the value must be 0",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "totalNumber",
            "in": "path",
            "description": "(string, required) the number of tokens to create",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BestBlockHash"
                }
              }
            }
          }
        }
      }
    },
    "/transaction/whcSendIssuanceFixed/{fromAddress}/{ecosystem}/{propertyPricision}/{previousId}/{category}/{subcategory}/{name}/{url}/{data}/{totalNumber}": {
      "get": {
        "tags": [
          "transaction"
        ],
        "summary": "whcSendIssuanceFixed",
        "description": "Create new tokens with fixed supply.",
        "operationId": "transactionWhcSendIssuanceFixed",
        "parameters": [
          {
            "name": "fromAddress",
            "in": "path",
            "description": "(string, required) the address to send from",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ecosystem",
            "in": "path",
            "description": "(string, required) the ecosystem to create the tokens in, must be 1",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyPricision",
            "in": "path",
            "description": "(number, required) the pricision of the tokens to create:[0, 8]",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "previousId",
            "in": "path",
            "description": "(number, required) an identifier of a predecessor token (use 0 for new tokens)",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "category",
            "in": "path",
            "description": "(string, required) a category for the new tokens (can be '')",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subcategory",
            "in": "path",
            "description": "(string, required) a subcategory for the new tokens  (can be '')",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "(string, required) the name of the new tokens to create",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "path",
            "description": "(string, required) an URL for further information about the new tokens (can be '')",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "data",
            "in": "path",
            "description": "(string, required) a description for the new tokens (can be '')",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "totalNumber",
            "in": "path",
            "description": "(string, required) the number of tokens to create",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BestBlockHash"
                }
              }
            }
          }
        }
      }
    },
    "/transaction/whcSendIssuanceManaged/{fromAddress}/{ecosystem}/{propertyPricision}/{previousId}/{category}/{subcategory}/{name}/{url}/{data}": {
      "get": {
        "tags": [
          "transaction"
        ],
        "summary": "whcSendIssuanceManaged",
        "description": "Create new tokens with manageable supply.",
        "operationId": "transactionWhcSendIssuanceManaged",
        "parameters": [
          {
            "name": "fromAddress",
            "in": "path",
            "description": "(string, required) the address to send from",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ecosystem",
            "in": "path",
            "description": "(string, required) the ecosystem to create the tokens in, must be 1",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyPricision",
            "in": "path",
            "description": "(number, required) the pricision of the tokens to create:[0, 8]",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "previousId",
            "in": "path",
            "description": "(number, required) an identifier of a predecessor token (use 0 for new tokens)",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "category",
            "in": "path",
            "description": "(string, required) a category for the new tokens (can be '')",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subcategory",
            "in": "path",
            "description": "(string, required) a subcategory for the new tokens  (can be '')",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "(string, required) the name of the new tokens to create",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "in": "path",
            "description": "(string, required) an URL for further information about the new tokens (can be '')",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "data",
            "in": "path",
            "description": "(string, required) a description for the new tokens (can be '')",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BestBlockHash"
                }
              }
            }
          }
        }
      }
    },
    "/transaction/whcSendRawTx/{fromAddress}/{rawTransaction}": {
      "get": {
        "tags": [
          "transaction"
        ],
        "summary": "whcSendIssuanceManaged",
        "description": "Broadcasts a raw Omni Layer transaction.",
        "operationId": "transactionWhcSendIssuanceManaged",
        "parameters": [
          {
            "name": "fromAddress",
            "in": "path",
            "description": "(string, required) the address to send from",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rawTransaction",
            "in": "path",
            "description": "(string, required) the hex-encoded raw transaction",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referenceAddress",
            "in": "path",
            "description": "(string, optional) a reference address (none by default)",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redeemAddress",
            "in": "path",
            "description": "(string, optional) an address that can spent the transaction dust (sender by default)",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referenceAmount",
            "in": "path",
            "description": "(string, optional) a bitcoin amount that is sent to the receiver (minimal by default)",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BestBlockHash"
                }
              }
            }
          }
        }
      }
    },
    "/transaction/whcSendRevoke/{fromAddress}/{propertyId}/{amount}": {
      "get": {
        "tags": [
          "transaction"
        ],
        "summary": "whcSendRevoke",
        "description": "Revoke units of managed tokens.",
        "operationId": "transactionWhcSendRevoke",
        "parameters": [
          {
            "name": "fromAddress",
            "in": "path",
            "description": "(string, required) the address to revoke the tokens from",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyId",
            "in": "path",
            "description": "(number, required) the identifier of the tokens to revoke",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "amount",
            "in": "path",
            "description": "(string, required) the amount of tokens to revoke",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memo",
            "in": "path",
            "description": "(string, optional) a text note attached to this transaction (none by default)",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BestBlockHash"
                }
              }
            }
          }
        }
      }
    },
    "/transaction/whcSendSTO/{fromAddress}/{propertyId}/{amount}": {
      "get": {
        "tags": [
          "transaction"
        ],
        "summary": "whcSendSTO",
        "description": "Create and broadcast a send-to-owners transaction.",
        "operationId": "transactionWhcSendSTO",
        "parameters": [
          {
            "name": "fromAddress",
            "in": "path",
            "description": "(string, required) the address to send from",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyId",
            "in": "path",
            "description": "(number, required) the identifier of the tokens to distribute",
            "required": true,
            "example": 0,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "amount",
            "in": "path",
            "description": "(string, required) the amount to distribute",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redeemAddress",
            "in": "path",
            "description": "(string, optional) an address that can spend the transaction dust (sender by default)",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "distributionProperty",
            "in": "path",
            "description": "(number, optional) the identifier of the property holders to distribute to",
            "required": false,
            "example": 0,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BestBlockHash"
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "/v1"
    }
  ],
  "components": {
    "schemas": {
      "AddressDetails": {
        "type": "object",
        "properties": {
          "balance": {
            "type": "number",
            "format": "float"
          },
          "balanceSat": {
            "type": "number",
            "format": "float"
          },
          "totalReceived": {
            "type": "number",
            "format": "float"
          },
          "totalReceivedSat": {
            "type": "number",
            "format": "float"
          },
          "totalSent": {
            "type": "number",
            "format": "float"
          },
          "totalSentSat": {
            "type": "number",
            "format": "float"
          },
          "unconfirmedBalance": {
            "type": "number",
            "format": "float"
          },
          "unconfirmedBalanceSat": {
            "type": "number",
            "format": "float"
          },
          "unconfirmedTxApperances": {
            "type": "number",
            "format": "float"
          },
          "txApperances": {
            "type": "number"
          },
          "transactions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "legacyAddress": {
            "type": "string"
          },
          "cashAddress": {
            "type": "string"
          }
        }
      },
      "AddressUtxo": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Utxo"
        }
      },
      "Utxo": {
        "type": "object",
        "properties": {
          "txid": {
            "type": "string"
          },
          "vout": {
            "type": "number"
          },
          "scriptPubKey": {
            "type": "string"
          },
          "amount": {
            "type": "number",
            "format": "float"
          },
          "satoshis": {
            "type": "number"
          },
          "height": {
            "type": "number"
          },
          "confirmations": {
            "type": "number"
          },
          "legacyAddress": {
            "type": "string"
          },
          "cashAddress": {
            "type": "string"
          }
        }
      },
      "AddressUnconfirmed": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Unconfirmed"
        }
      },
      "Unconfirmed": {
        "type": "object",
        "properties": {
          "txid": {
            "type": "string"
          },
          "vout": {
            "type": "number"
          },
          "scriptPubKey": {
            "type": "string"
          },
          "amount": {
            "type": "number",
            "format": "float"
          },
          "satoshis": {
            "type": "number"
          },
          "height": {
            "type": "number"
          },
          "confirmations": {
            "type": "number"
          },
          "legacyAddress": {
            "type": "string"
          },
          "cashAddress": {
            "type": "string"
          }
        }
      },
      "BlockDetails": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string"
          },
          "size": {
            "type": "number"
          },
          "height": {
            "type": "number"
          },
          "version": {
            "type": "number"
          },
          "merkleroot": {
            "type": "string"
          },
          "tx": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "time": {
            "type": "number"
          },
          "nonce": {
            "type": "number"
          },
          "bits": {
            "type": "string"
          },
          "difficulty": {
            "type": "number",
            "format": "float"
          },
          "chainwork": {
            "type": "string"
          },
          "confirmations": {
            "type": "number"
          },
          "previousblockhash": {
            "type": "string"
          },
          "nextblockhash": {
            "type": "string"
          },
          "reward": {
            "type": "number",
            "format": "float"
          },
          "isMainChain": {
            "type": "boolean"
          },
          "poolInfo": {
            "type": "object",
            "properties": {
              "poolName": "string",
              "url": "string"
            }
          }
        }
      },
      "BestBlockHash": {
        "type": "string"
      },
      "Block": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string"
          },
          "confirmations": {
            "type": "number"
          },
          "size": {
            "type": "number"
          },
          "height": {
            "type": "number"
          },
          "version": {
            "type": "number"
          },
          "versionHex": {
            "type": "string"
          },
          "merkleroot": {
            "type": "string"
          },
          "tx": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "time": {
            "type": "number"
          },
          "mediantime": {
            "type": "number"
          },
          "nonce": {
            "type": "number"
          },
          "bits": {
            "type": "string"
          },
          "difficulty": {
            "type": "number",
            "format": "float"
          },
          "chainwork": {
            "type": "string"
          },
          "previousblockhash": {
            "type": "string"
          },
          "nextblockhash": {
            "type": "string"
          }
        }
      },
      "BlockchainInfo": {
        "type": "object",
        "properties": {
          "chain": {
            "type": "string"
          },
          "blocks": {
            "type": "number"
          },
          "headers": {
            "type": "number"
          },
          "bestblockhash": {
            "type": "string"
          },
          "difficulty": {
            "type": "number",
            "format": "float"
          },
          "mediantime": {
            "type": "number"
          },
          "verificationprogress": {
            "type": "number",
            "format": "float"
          },
          "chainwork": {
            "type": "string"
          },
          "pruned": {
            "type": "boolean"
          },
          "softforks": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": "string",
                "version": "number",
                "reject": {
                  "type": "object",
                  "properties": {
                    "status": "boolean"
                  }
                }
              }
            }
          },
          "bip9_softforks": {
            "type": "object",
            "properties": {
              "status": "string",
              "startTime": "number",
              "timeout": "number",
              "since": "number"
            }
          }
        }
      },
      "BlockCount": {
        "type": "number"
      },
      "BlockHash": {
        "type": "string"
      },
      "BlockHeader": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string"
          },
          "confirmations": {
            "type": "number"
          },
          "height": {
            "type": "number"
          },
          "version": {
            "type": "number"
          },
          "versionHex": {
            "type": "string"
          },
          "merkleroot": {
            "type": "string"
          },
          "time": {
            "type": "number"
          },
          "mediantime": {
            "type": "number"
          },
          "nonce": {
            "type": "number"
          },
          "bits": {
            "type": "string"
          },
          "difficulty": {
            "type": "number",
            "format": "float"
          },
          "chainwork": {
            "type": "string"
          },
          "previousblockhash": {
            "type": "string"
          },
          "nextblockhash": {
            "type": "string"
          }
        }
      },
      "Difficulty": {
        "type": "number",
        "format": "float"
      },
      "MempoolInfo": {
        "type": "object",
        "properties": {
          "size": {
            "type": "number"
          },
          "bytes": {
            "type": "number"
          },
          "usage": {
            "type": "number"
          },
          "maxmempool": {
            "type": "number"
          },
          "mempoolminfee": {
            "type": "number"
          }
        }
      },
      "RawMempool": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "DecodeRawTransaction": {
        "type": "object",
        "properties": {
          "txid": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          },
          "size": {
            "type": "number"
          },
          "version": {
            "type": "number"
          },
          "vin": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "txid": {
                  "type": "string"
                },
                "vout": {
                  "type": "number"
                },
                "scriptSig": {
                  "type": "object",
                  "properties": {
                    "asm": {
                      "type": "string"
                    },
                    "hex": {
                      "type": "string"
                    }
                  }
                },
                "sequence": {
                  "type": "string"
                }
              }
            }
          },
          "vout": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "number"
                },
                "n": {
                  "type": "number"
                },
                "scriptPubkey": {
                  "type": "object",
                  "properties": {
                    "asm": {
                      "type": "string"
                    },
                    "hex": {
                      "type": "string"
                    },
                    "reqSigs": {
                      "type": "number"
                    },
                    "type": {
                      "type": "string"
                    },
                    "addresses": {
                      "type": "array",
                      "items": {
                        "address": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "DecodeScript": {
        "type": "object",
        "properties": {
          "asm": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "p2sh": {
            "type": "string"
          }
        }
      },
      "GetRawTransaction": {
        "type": "object",
        "properties": {
          "hex": {
            "type": "string"
          },
          "txid": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          },
          "size": {
            "type": "number"
          },
          "version": {
            "type": "number"
          },
          "vin": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "txid": {
                  "type": "string"
                },
                "vout": {
                  "type": "number"
                },
                "scriptSig": {
                  "type": "object",
                  "properties": {
                    "asm": {
                      "type": "string"
                    },
                    "hex": {
                      "type": "string"
                    },
                    "sequence": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "vout": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "number"
                },
                "n": {
                  "type": "number"
                },
                "scriptPubkey": {
                  "type": "object",
                  "properties": {
                    "asm": {
                      "type": "string"
                    },
                    "hex": {
                      "type": "string"
                    },
                    "reqSigs": {
                      "type": "number"
                    },
                    "type": {
                      "type": "string"
                    },
                    "addresses": {
                      "type": "array",
                      "items": {
                        "address": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "blockhash": {
            "type": "string"
          },
          "confirmations": {
            "type": "number"
          },
          "time": {
            "type": "number"
          },
          "blocktime": {
            "type": "number"
          }
        }
      },
      "TransactionDetails": {
        "type": "object",
        "properties": {
          "txid": {
            "type": "string"
          },
          "version": {
            "type": "number"
          },
          "locktime": {
            "type": "number"
          },
          "vin": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "txid": {
                  "type": "string"
                },
                "vout": {
                  "type": "number"
                },
                "sequence": {
                  "type": "number"
                },
                "n": {
                  "type": "number"
                },
                "scriptSig": {
                  "type": "object",
                  "properties": {
                    "hex": {
                      "type": "string"
                    },
                    "asm": {
                      "type": "string"
                    },
                    "value": {
                      "type": "number"
                    },
                    "legacyAddress": {
                      "type": "string"
                    },
                    "cashAddress": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "vout": {
            "type": "array",
            "items": {
              "objects": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "number"
                  },
                  "n": {
                    "type": "number"
                  },
                  "scriptPubkey": {
                    "type": "object",
                    "properties": {
                      "hex": {
                        "type": "string"
                      },
                      "asm": {
                        "type": "string"
                      },
                      "addresses": {
                        "type": "array",
                        "items": {
                          "address": {
                            "type": "string"
                          }
                        }
                      },
                      "type": {
                        "type": "string"
                      }
                    }
                  },
                  "spentTxId": {
                    "type": "string"
                  },
                  "spentIndex": {
                    "type": "number"
                  },
                  "spentHeight": {
                    "type": "number"
                  }
                }
              },
              "type": "object",
              "properties": {
                "value": {
                  "type": "number"
                },
                "n": {
                  "type": "number"
                },
                "scriptPubkey": {
                  "type": "object",
                  "properties": {
                    "hex": {
                      "type": "string"
                    },
                    "asm": {
                      "type": "string"
                    }
                  }
                },
                "spentTxId": {
                  "type": "string"
                },
                "spentIndex": {
                  "type": "number"
                },
                "spentHeight": {
                  "type": "number"
                }
              }
            }
          },
          "blockhash": {
            "type": "string"
          },
          "blockheight": {
            "type": "number"
          },
          "confirmations": {
            "type": "number"
          },
          "time": {
            "type": "number"
          },
          "valueOut": {
            "type": "number"
          },
          "size": {
            "type": "number"
          },
          "valueIn": {
            "type": "number"
          },
          "fees": {
            "type": "number"
          }
        }
      },
      "ValidateAddress": {
        "type": "object",
        "properties": {
          "isvalid": {
            "type": "boolean"
          },
          "address": {
            "type": "string"
          },
          "scriptPubKey": {
            "type": "string"
          },
          "ismine": {
            "type": "boolean"
          },
          "iswatchonly": {
            "type": "boolean"
          },
          "isscript": {
            "type": "boolean"
          }
        }
      },
      "Info": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number"
          },
          "protocolversion": {
            "type": "number"
          },
          "blocks": {
            "type": "number"
          },
          "timeoffset": {
            "type": "number"
          },
          "connections": {
            "type": "number"
          },
          "proxy": {
            "type": "string"
          },
          "difficulty": {
            "type": "number",
            "format": "float"
          },
          "paytxfee": {
            "type": "number"
          },
          "relayfee": {
            "type": "number",
            "format": "float"
          },
          "errors": {
            "type": "string"
          }
        }
      },
      "MemoryInfo": {
        "type": "object",
        "properties": {
          "locked": {
            "type": "object",
            "properties": {
              "used": {
                "type": "number"
              },
              "free": {
                "type": "number"
              },
              "total": {
                "type": "number"
              },
              "locked": {
                "type": "number"
              },
              "chunks_used": {
                "type": "number"
              },
              "chunks_free": {
                "type": "number"
              }
            }
          }
        }
      },
      "MiningInfo": {
        "type": "object",
        "properties": {
          "blocks": {
            "type": "number"
          },
          "currentblocksize": {
            "type": "number"
          },
          "currentblocktx": {
            "type": "number"
          },
          "difficulty": {
            "type": "number",
            "format": "float"
          },
          "blockprioritypercentage": {
            "type": "number"
          },
          "errors": {
            "type": "string"
          },
          "networkhashps": {
            "type": "number"
          },
          "pooledtx": {
            "type": "number"
          },
          "chain": {
            "type": "string"
          }
        }
      },
      "NetworkHashps": {
        "type": "number"
      },
      "ConnectionCount": {
        "type": "number"
      },
      "MempoolAncestors": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "MempoolDescendants": {
        "type": "array",
        "items": {
          "type": "string"
        }
      }
    }
  }
}
